extends layout

block extraHeader
    script(type='text/javascript' src='/js/home.js')
    script(type='text/javascript' src='/js/bindings/datepicker.js')
    script(type='text/javascript' src='/js/bindings/popover.js')
    link(rel='stylesheet', href='/css/home.css')

block content
    .container
        .row
            .col-md-4
                .panel.panel-default
                    .panel-heading
                        .row
                            .col.col-xs-3
                                h3.panel-title Cash
                            .col.col-xs-9.text-right
                                button.btn.btn-sm.btn-primary.btn-create.m-none(type='button', data-toggle='modal', data-target='#cashModal') Add Cash
                    .panel-body
                        .sk-folding-cube(data-bind='visible: cashReservesLoading')
                            .sk-cube1.sk-cube
                            .sk-cube2.sk-cube
                            .sk-cube4.sk-cube
                            .sk-cube3.sk-cube
                        .amount.text-center(style='display: none', data-bind='visible: !cashReservesLoading(), foreach: cashReserves')
                            span(data-bind='text: $root.formatCurrency(amount, currency)') 
                            br
                            span Worth: 
                            span(data-bind='text: $root.formatCurrency(worth, base)')
                            hr
            .col-md-8
                .panel.panel-default
                    .panel-heading
                        .row
                            .col.col-xs-3
                                h3.panel-title Trip Budget
                    .panel-body
                        .sk-folding-cube(data-bind='visible: tripOverviewLoading')
                            .sk-cube1.sk-cube
                            .sk-cube2.sk-cube
                            .sk-cube4.sk-cube
                            .sk-cube3.sk-cube
                        .trip.text-center(style='display: none', data-bind='visible: !tripOverviewLoading()')
                            div(data-bind='visible: !trip().tripId')
                                h4 It doesn't look like you have an active trip.  
                                    a(href='/createTrip') Set one up now!
                            div(data-bind='visible: trip().tripId')
                                span Trip
        .row
            .col-md-12
                .panel.panel-default.panel-table
                    .panel-heading
                        .row
                            .col.col-xs-6
                                h3.panel-title Transactions
                            .col.col-xs-6.text-right
                                button.btn.btn-sm.btn-primary.btn-create.m-none(type='button', data-toggle='modal', data-target='#transactionModal') Add New
                    .panel-body
                        .sk-folding-cube(data-bind='visible: transactionsLoading')
                            .sk-cube1.sk-cube
                            .sk-cube2.sk-cube
                            .sk-cube4.sk-cube
                            .sk-cube3.sk-cube
                        table.table.table-striped.table-bordered.table-list(style='display: none', data-bind='visible: !transactionsLoading()')
                            thead
                                tr
                                    th #
                                    th Type
                                    th Amount
                                    th Value
                                    th Category
                                    th Date
                                    th Country
                            tbody
                                // ko foreach: transactions
                                tr
                                    td(data-bind='text: ($index() + 1)')
                                    td(data-bind='text: $root.toTitleCase(type)')
                                    td
                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[currency].icon + ".png" }')
                                        span(data-bind='text: amount + " " + currency')
                                    td
                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[base_currency].icon + ".png" }')
                                        span(data-bind='text: base_amount + " " + base_currency')
                                    td(data-bind='text: $root.toTitleCase(category)')
                                    td(data-bind='text: moment(date).format("YYYY-MM-DD")')
                                    td
                                        img.img-flag(data-bind='attr: { src: $root.getIconForCountry(country) }')
                                        span(data-bind='text: $root.getNameForCountry(country)')
                                // /ko

        //- Modals
        #transactionModal.modal.fade(role='dialog', aria-labelledby='transactionModalLabel')
            .modal-dialog(role='document')
                .modal-content
                    .modal-header
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') Ã—
                        h4#transactionModalLabel.modal-title Record Transaction
                    .modal-body
                        span.error-message(data-bind='visible: transactionError, text: transactionError')
                        .form-group
                            label.radio-inline
                                input(type='radio', name='transactionType', value='cash', data-bind='checked: transactionType')
                                | Cash
                            label.radio-inline
                                input(type='radio', name='transactionType', value='credit', data-bind='checked: transactionType')
                                | Credit
                        .form-group.m-none
                            .row
                                .amount-input.col-md-8(data-bind='css: { "has-error": transactionAmount.canValidate() && transactionAmount.errors().length }')
                                    label(for='transactionAmountInput') Transaction Amount
                                    input.form-control(type='number', min='0', id='transactionAmountInput', data-bind='value: transactionAmount, valueUpdate: "afterkeydown"')
                                    //ko if: transactionAmount.canValidate() && transactionAmount.errors().length
                                    //ko foreach: transactionAmount.errors
                                    span.form-error(data-bind='text: message')
                                    // /ko
                                    // /ko
                                .currency-input.col-md-4
                                    label(for='transactionCurrency') Currency
                                    select.form-control.currency-dropdown#transactionCurrency(required)
                                        option
                                    small.form-text.text-muted.m-bottom The currency in which you paid
                                    br
                        .form-group.m-none
                            .row
                                .col-md-6
                                    label(for='transactionDate', data-bind='text: transactionDateLabel')
                                    .input-group
                                        input.form-control(id='transactionDate', data-bind='dateTimePicker: transactionDate', type='text')
                                        span.input-group-addon
                                            i.fa.fa-calendar
                                .col-md-6(data-bind='visible: transactionSplit')
                                    label(for='transactionEnd') End Date
                                    .input-group
                                        input.form-control(id='transactionEnd', data-bind='dateTimePicker: transactionEnd', type='text')
                                        span.input-group-addon
                                            i.fa.fa-calendar
                            .row.m-top-small
                                .col-md-12
                                    a(href='#' data-bind='click: toggleTransactionSplit, text: transactionSplitText')

                        .form-group.m-none.m-top
                            .country-input
                                label(for='transactionCountry') Country
                                select.form-control.country-dropdown#transactionCountry(required)
                                    option
                        .do-not-associate
                            label.form-check-label
                                input.form-check-input(type='checkbox', value='', data-bind='checked: unassociatedTransaction')
                                | Do not associate this transaction with a country
                                button.btn.btn-sm.help(data-bind='popover: { options: { content: "If selected, this transaction will not show up in any country\'s expenses.  It will show up in its own Unassigned category.", trigger: "hover" } }')
                                    i.fa.fa-question-circle-o
                        .form-group.m-none
                            label Category
                            .row
                                // ko foreach: categories
                                .col-md-2
                                    .row.category-option(data-bind='click: $root.categoryClicked, css: { "category-selected": $root.selectedCategory() && ($root.selectedCategory().id == id) }')
                                        input.category-value(type='hidden', data-bind='value: id')
                                        .col-md-12.category-icon
                                            i(data-bind='attr: { "class": "fa fa-" + icon }')
                                        .col-md-12.category-label
                                            span(data-bind='text: $root.toTitleCase(category)')
                                // /ko
                        .form-group.m-none.m-top
                            label(for='descriptionInput') Description (optional)
                            label.pull-right(data-bind='text: descriptionRemainingLength')
                            textarea.form-control#descriptionInput(data-bind='value: transactionDescription, valueUpdate: "afterkeydown"')
                                        
                    .modal-footer
                        button.btn.btn-default(type='button', data-dismiss='modal') Cancel
                        button.btn.btn-primary(type='button', data-bind='click: saveTransaction, enable: canSubmitTransaction') Save


        #cashModal.modal.fade(role='dialog', aria-labelledby='cashModalLabel')
            .modal-dialog(role='document')
                .modal-content
                    .modal-header
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') Ã—
                        h4#cashModalLabel.modal-title Add Cash
                    .modal-body
                        span.error-message(data-bind='visible: withdrawalError, text: withdrawalError')
                        .form-group
                            label.radio-inline
                                input(type='radio', name='withdrawalType', value='atm', data-bind='checked: withdrawalType')
                                | ATM Withdrawal
                            label.radio-inline
                                input(type='radio', name='withdrawalType', value='earned', data-bind='checked: withdrawalType')
                                | Earned Cash
                        .row
                            .amount-input.col-md-9
                                .form-group.m-none(data-bind='css: { "has-error": withdrawalAmount.canValidate() && withdrawalAmount.errors().length }')
                                    label(for='withdrawalAmountInput') Amount
                                    input.form-control(type='number', min='0', id='withdrawalAmountInput', data-bind='value: withdrawalAmount, valueUpdate: "afterkeydown"')
                                    //ko if: withdrawalAmount.canValidate() && withdrawalAmount.errors().length
                                    //ko foreach: withdrawalAmount.errors
                                    span.form-error(data-bind='text: message')
                                    // /ko
                                    // /ko
                            .currency-input.col-md-3
                                label(for='withdrawalCurrency') Currency
                                select.form-control.currency-dropdown#withdrawalCurrency(required)
                                    option
                                //- small.form-text.text-muted.m-bottom The currency you withdrew from the ATM
                                br
                        label(for='withdrawalDate') Date
                        .input-group.m-none
                            input.form-control(id='withdrawalDate', data-bind='dateTimePicker: withdrawalDate', type='text')
                            span.input-group-addon
                                i.fa.fa-calendar
                        .form-check(data-bind='visible: withdrawalType() == "atm"')
                            label.form-check-label.m-top
                                input.form-check-input(type='checkbox', value='', data-bind='checked: isTransactionFee')
                                | This withdrawal incurred a transaction fee
                        .input-group.m-none(data-bind='visible: withdrawalType() == "atm" && isTransactionFee(), css: { "has-error": transactionFee.canValidate() && transactionFee.errors().length }')
                            label.m-top(for='transactionFee', data-bind='text: transactionFeeLabel')
                            input.form-control(type='number', min='0', id='transactionFee', data-bind='value: transactionFee, valueUpdate: "afterkeydown"')
                            //ko if: transactionFee.canValidate() && transactionFee.errors().length
                            //ko foreach: transactionFee.errors
                            span.form-error(data-bind='text: message')
                            // /ko
                            // /ko

                    .modal-footer
                        button.btn.btn-default(type='button', data-dismiss='modal') Cancel
                        button.btn.btn-primary(type='button', data-bind='click: saveWithdrawal, enable: canSubmitWithdrawal') Save



    script.
        var vm = new HomeViewModel();
        var currencies = !{currency};
        var countries = !{countries};
        vm.currencyArr = ko.observableArray(currencies);
        vm.currencyObj = ko.observable({});
        vm.countryArr = ko.observableArray([]);
        vm.countryObj = ko.observable(countries);

        // Preload flag images
        var images = new Array()
        var noImage = ['BQ', 'BV', 'GF', 'GP', 'HM', 'IO', 'PM', 'RE', 'SJ', 'SX', 'UM', 'XK'];
        function preload(src) {
            images.push(new Image());
            images[images.length - 1].src = src;
        }
        for(var key in vm.countryObj().countries) {
            if(vm.countryObj().countries.hasOwnProperty(key)) {
                var country = vm.countryObj().countries[key];
                if(noImage.indexOf(key) == -1) {
                    vm.countryObj().countries[key].icon = key;
                    preload('images/flags/16/' + key + '.png');
                }
                else {
                    vm.countryObj().countries[key].icon = '_unknown';
                }
                country.id = key;
                vm.countryArr.push(country);
            }
        }
        for(var i = 0; i < vm.currencyArr().length; i++) {
            vm.currencyObj()[vm.currencyArr()[i].id] = vm.currencyArr()[i];
        }
        
        $(document).ready(function() {
            ko.applyBindings(vm);
            var formatOption = function(item) {
                if (!item.icon) { return item.display_name; }
                var $item = $(
                    '<span><img src="images/flags/16/' + item.icon + '.png" class="img-flag" /> ' + item.display_name + '</span>'
                );
                return $item;
            };
            var formatSelection = function(item) {
                if (!item.icon) { return item.display_name; }
                var $item = $(
                    '<span><img src="images/flags/16/' + item.icon + '.png" class="img-flag" /> ' + item.id + '</span>'
                );
                return $item;
            };
            $('.currency-dropdown').select2({
                data: vm.currencyArr(),
                matcher: function(params, data) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return data;
                    }
                    if(data.id === '') {
                        return null;
                    }
                    if(data.display_name.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    return null;
                },
                placeholder: {
                    id: '',
                    display_name: 'Home Currency',
                    icon: '_unknown'
                },
                templateResult: formatOption,
                templateSelection: formatSelection,
                theme: 'bootstrap'
            });

            var formatCountryOption = function(item) {
                var code = item.id || '_unknown';
                if(noImage.indexOf(code) > -1) {
                    code = '_unknown';
                }
                var $item = $(
                    '<span><img src="images/flags/16/' + code + '.png" class="img-flag" /> ' + item.name + '</span>'
                );
                return $item;
            };
            $('.country-dropdown').select2({
                data: vm.countryArr(),
                matcher: function(params, data) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return data;
                    }
                    if(data.id === '') {
                        return null;
                    }
                    if(data.name.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    if(data.native.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    return null;
                },
                placeholder: {
                    id: '',
                    name: 'Select Country',
                    icon: '_unknown'
                },
                templateResult: formatCountryOption,
                templateSelection: formatCountryOption,
                theme: 'bootstrap'
            });
            //- $('.select2-selection').css('height', 'auto');

            $('#cashModal').on('shown.bs.modal', function () {
                $('#withdrawalAmountInput').focus();
            });
            $('#transactionModal').on('shown.bs.modal', function() {
                $('#transactionAmountInput').focus();
            });
            $('#transactionCurrency').on("select2:select", function (e) {
                $('#transactionDate').focus();
            });
            $('#withdrawalCurrency').on("select2:select", function (e) {
                $('#withdrawalDate').focus();
            });

            var lastWithdrawalCurrency = vm.getItem('lastWithdrawalCurrency');
            if(lastWithdrawalCurrency) {
                $('#withdrawalCurrency').val(lastWithdrawalCurrency).trigger('change');
            }
            var lastTransactionCurrency = vm.getItem('lastTransactionCurrency');
            if(lastTransactionCurrency) {
                $('#transactionCurrency').val(lastTransactionCurrency).trigger('change');
            }
            var lastTransactionCountry = vm.getItem('lastTransactionCountry');
            if(lastTransactionCountry) {
                $('#transactionCountry').val(lastTransactionCountry).trigger('change');
            }
        });