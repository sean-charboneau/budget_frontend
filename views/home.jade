extends layout

block extraHeader
    link(rel='stylesheet', href='/css/home.css')

block extraScripts
    script(type='text/javascript' src='/js/home.js')
    script(type='text/javascript' src='/js/bindings/datepicker.js')
    script(type='text/javascript' src='/js/bindings/popover.js')

block content
    .container
        .row
            .col-md-4
                .card
                    .card-header.default-color.lighten-1.white-text
                        .row
                            .col.col-xs-3
                                span Cash
                            .col.col-xs-9.text-right
                                button.btn.btn-sm.stylish-color.btn-create.m-none.waves-effect(type='button', data-toggle='modal', data-target='#cashModal') Add Cash
                    .card-body
                        .text-center(data-bind='visible: cashReservesLoading')
                            .preloader-wrapper.big.active
                                .spinner-layer.spinner-blue-only
                                    .circle-clipper.left
                                        .circle
                                    .gap-patch
                                        .circle
                                    .circle-clipper.right
                                        .circle
                        .amount.text-center(style='display: none', data-bind='visible: !cashReservesLoading()')
                            div(data-bind='visible: !cashReserves')
                                h4 No Cash
                                    //- a(href='/createTrip') Set one up now!
                            div(data-bind='visible: cashReserves')
                                // ko foreach: cashReserves
                                span(data-bind='text: $root.formatCurrency(amount, currency)') 
                                br
                                span Worth: 
                                span(data-bind='text: $root.formatCurrency(worth, base)')
                                hr(data-bind='visible: $index() != ($parent.cashReserves().length - 1)')
                                // /ko
            .col-md-8
                .budget-cards(style='display: none', data-bind='visible: !tripOverviewLoading() && trip().tripId')
                    .row
                        .col.col-md-4.text-center
                            .card-wrapper
                                #card-1.card-rotating.effect__click
                                    .face.front
                                        .card-up.default-color.lighten-1.white-text.p-top-small
                                            h4 Today
                                        .avatar.default-color.lighten-1
                                            #today-progress.budget-progress.cursor-pointer
                                        .card-body
                                            h4(data-bind='text: overText("today")')
                                            p(data-bind='text: budgetText("today")')
                                            a.rotate-btn(data-card='card-1')
                                                i.fa.fa-repeat
                                                |  More details
                                    .face.back
                                        h4 Today's Budget
                                        hr
                                        p(data-bind='text: budgetText("today", true)')
                                        a.rotate-btn(data-card='card-1')
                                            i.fa.fa-undo
                                            |  Back
                        .col.col-md-4.text-center
                            .card-wrapper
                                #card-2.card-rotating.effect__click
                                    .face.front
                                        .card-up.default-color.lighten-1.white-text.p-top-small
                                            h4(data-bind='text: getNameForCurrentCountry()')
                                        .avatar.default-color.lighten-1
                                            #country-progress.budget-progress.cursor-pointer
                                        .card-body
                                            h4(data-bind='text: overText("country")')
                                            p(data-bind='text: budgetText("country")')
                                            a.rotate-btn(data-card='card-2')
                                                i.fa.fa-repeat
                                                |  More details
                                    .face.back
                                        h4 Country's Budget
                                        hr
                                        p(data-bind='text: budgetText("country", true)')
                                        a.rotate-btn(data-card='card-2')
                                            i.fa.fa-undo
                                            |  Back
                        .col.col-md-4.text-center
                            .card-wrapper
                                #card-3.card-rotating.effect__click
                                    .face.front
                                        .card-up.default-color.lighten-1.white-text.p-top-small
                                            h4 Trip
                                        .avatar.default-color.lighten-1
                                            #trip-progress.budget-progress.cursor-pointer
                                        .card-body
                                            h4(data-bind='text: overText("trip")')
                                            p(data-bind='text: budgetText("trip")')
                                            a.rotate-btn(data-card='card-3')
                                                i.fa.fa-repeat
                                                |  More details
                                    .face.back
                                        h4 Trip's Budget
                                        hr
                                        p(data-bind='text: budgetText("trip", true)')
                                        a.rotate-btn(data-card='card-3')
                                            i.fa.fa-undo
                                            |  Back
                .card(data-bind='visible: tripOverviewLoading() || !trip().tripId')
                    .card-header.default-color.lighten-1.white-text
                        .row
                            .col.col-xs-3
                                span Trip Budget
                    .card-body
                        .text-center(data-bind='visible: tripOverviewLoading')
                            .preloader-wrapper.big.active
                                .spinner-layer.spinner-blue-only
                                    .circle-clipper.left
                                        .circle
                                    .gap-patch
                                        .circle
                                    .circle-clipper.right
                                        .circle
                        .trip.text-center(style='display: none', data-bind='visible: !tripOverviewLoading()')
                            div
                                h4 It doesn't look like you have an active trip.  
                                    a(href='/createTrip') Set one up now!
                            

        .row.m-top
            .col-md-12
                .card
                    .card-header.default-color.lighten-1.white-text
                        .row
                            .col.col-xs-6
                                span Transactions
                            .col.col-xs-6.text-right(style='display: none', data-bind='visible: !transactionsLoading() && trip().tripId')
                                button.btn.btn-sm.stylish-color.btn-create.m-none.waves-effect(type='button' data-toggle='modal', data-target='#transactionModal') Add New
                    .card-body.p-none
                        .text-center(data-bind='visible: transactionsLoading')
                            .preloader-wrapper.big.active.m-top.m-bottom
                                .spinner-layer.spinner-blue-only
                                    .circle-clipper.left
                                        .circle
                                    .gap-patch
                                        .circle
                                    .circle-clipper.right
                                        .circle
                        .transactions.text-center(style='display: none', data-bind='visible: !transactionsLoading()')
                            div.text-center(data-bind='visible: !trip().tripId')
                                h4 Please 
                                    a(href='/createTrip') set up a trip 
                                    | to add transactions
                            table.table.table-striped.table-bordered.table-list.table-sm(data-bind='visible: trip().tripId')
                                thead
                                    tr
                                        th #
                                        th Type
                                        th Amount
                                        th Value
                                        th Category
                                        th Date
                                        th Country
                                tbody
                                    // ko foreach: transactions
                                    tr
                                        td(data-bind='text: ($index() + 1)')
                                        td(data-bind='text: $root.toTitleCase(type)')
                                        td
                                            img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[currency].icon + ".png" }')
                                            span(data-bind='text: amount + " " + currency')
                                        td
                                            img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[base_currency].icon + ".png" }')
                                            span(data-bind='text: base_amount + " " + base_currency')
                                        td(data-bind='text: $root.toTitleCase(category)')
                                        td(data-bind='text: moment(date).format("YYYY-MM-DD")')
                                        td
                                            img.img-flag(data-bind='attr: { src: $root.getIconForCountry(country) }')
                                            span(data-bind='text: $root.getNameForCountry(country)')
                                    // /ko

        //- Modals
        #transactionModal.modal.fade(role='dialog', aria-labelledby='transactionModalLabel', aria-hidden='true')
            .modal-dialog.cascading-modal(role='document')
                // Content
                .modal-content
                    // Header
                    .modal-header.default-color.darken-3.white-text
                        h4.title
                            i.fa.fa-money
                            |  Record Transaction
                        button.close.waves-effect.waves-light(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                    // Body
                    .modal-body.mb-0
                        span.error-message(data-bind='visible: transactionError, text: transactionError')
                        .md-form.switch-input
                            .switch
                                label
                                    | Cash
                                    input(type='checkbox', data-bind='checked: transactionCredit')
                                    span.lever
                                    |       Credit

                        .form-group.m-none
                            .row
                                .amount-input.col-md-8(data-bind='css: { "has-error": transactionAmount.canValidate() && transactionAmount.errors().length }')
                                    .md-form
                                        input#transactionAmountInput.form-control(type='number', min='0', data-bind='value: transactionAmount, valueUpdate: "afterkeydown"')
                                        label(for='transactionAmountInput') Transaction Amount
                                    //ko if: transactionAmount.canValidate() && transactionAmount.errors().length
                                    //ko foreach: transactionAmount.errors
                                    span.form-error(data-bind='text: message')
                                    // /ko
                                    // /ko
                                .currency-input.col-md-4
                                    label(for='transactionCurrency') Currency
                                    select.form-control.currency-dropdown#transactionCurrency(required)
                                        option
                                    //- small.form-text.text-muted.m-bottom The currency in which you paid
                                    br
                        .form-group.m-none
                            .row
                                .col-md-6
                                    label(for='transactionDateInput', data-bind='text: transactionDateLabel')
                                    .input-group
                                        input#transactionDateInput.form-control(data-bind='dateTimePicker: transactionDate', type='text')
                                        span.input-group-addon
                                            i.fa.fa-calendar
                                .col-md-6(data-bind='visible: transactionSplit')
                                    label(for='transactionEndInput') End Date
                                    .input-group
                                        input#transactionEndInput.form-control(data-bind='dateTimePicker: transactionEnd', type='text')
                                        span.input-group-addon
                                            i.fa.fa-calendar
                            .row.m-top-small.m-bottom
                                .col-md-12
                                    a(href='#' style='font-size: 70%', data-bind='click: toggleTransactionSplit, text: transactionSplitText')

                        .form-group(data-bind='visible: !unassociatedTransaction()')
                            .country-input
                                label(for='transactionCountry') Country
                                select.form-control.country-dropdown#transactionCountry(required)
                                    option
                        .do-not-associate
                            .form-group
                                input#doNotAssociateCheckbox(type='checkbox', value='', data-bind='checked: unassociatedTransaction')
                                label(for='doNotAssociateCheckbox') Do not associate this transaction with a country
                                i.fa.fa-question-circle-o.help(data-bind='popover: { options: { content: "If selected, this transaction will not show up in any country\'s expenses.  It will show up in its own Unassigned category.", trigger: "hover" } }')
                                    
                        .form-group
                            label Category
                            .row
                                // ko foreach: categories
                                .col-md-2
                                    .row.category-option(data-bind='click: $root.categoryClicked, css: { "category-selected": $root.selectedCategory() && ($root.selectedCategory().id == id) }')
                                        input.category-value(type='hidden', data-bind='value: id')
                                        .col-md-12.category-icon
                                            i(data-bind='attr: { "class": "fa fa-" + icon }')
                                        .col-md-12.category-label
                                            span(data-bind='text: $root.toTitleCase(category)')
                                // /ko
                        .form-group
                            .md-form
                                textarea.md-textarea#descriptionInput(type='text', data-bind='value: transactionDescription, valueUpdate: "afterkeydown"')
                                label(for='descriptionInput', data-bind='text: descriptionRemainingLength')
                                        

                    .modal-footer
                        button.btn.btn-default.waves-effect(type='button', data-dismiss='modal') Cancel
                        button.btn.stylish-color.waves-effect(type='button', data-bind='click: saveTransaction, enable: canSubmitTransaction') Save

                    
        #cashModal.modal.fade(role='dialog', aria-labelledby='cashModalLabel')
            .modal-dialog.cascading-modal(role='document')
                .modal-content
                    .modal-c-tabs
                        ul.nav.nav-tabs.tabs-2.default-color.darken-3(role='tablist')
                            li.nav-item
                                a.nav-link.active(data-toggle='tab', href='#atmPanel', role='tab') ATM Withdrawal
                            li.nav-item
                                a.nav-link(data-toggle='tab', href='#earnedPanel', role='tab') Earned Cash
                        .tab-content
                            #atmPanel.tab-pane.fade.show.active(role='tabpanel')
                                .modal-body.mb-1
                                    span.error-message(data-bind='visible: withdrawalError, text: withdrawalError')
                                    .form-group.m-none
                                        .row
                                            .amount-input.col-md-8(data-bind='css: { "has-error": withdrawalATMAmount.canValidate() && withdrawalATMAmount.errors().length }')
                                                .md-form
                                                    input#withdrawalATMAmountInput.form-control(type='number', min='0', data-bind='value: withdrawalATMAmount, valueUpdate: "afterkeydown"')
                                                    label(for='withdrawalATMAmountInput') Amount Withdrawn
                                                //ko if: withdrawalATMAmount.canValidate() && withdrawalATMAmount.errors().length
                                                //ko foreach: withdrawalATMAmount.errors
                                                span.form-error(data-bind='text: message')
                                                // /ko
                                                // /ko
                                            .currency-input.col-md-4
                                                label(for='withdrawalATMCurrency') Currency
                                                select.form-control.currency-dropdown#withdrawalATMCurrency(required)
                                                    option
                                                //- small.form-text.text-muted.m-bottom The currency you withdrew from the ATM
                                                br
                                    .form-group
                                        label(for='withdrawalATMDateInput') Date
                                        .input-group
                                            input#withdrawalATMDateInput.form-control(data-bind='dateTimePicker: withdrawalDate', type='text')
                                            span.input-group-addon
                                                i.fa.fa-calendar
                                    .form-group
                                        input#transactionFeeCheckbox(type='checkbox', value='', data-bind='checked: isTransactionFee')
                                        label(for='transactionFeeCheckbox') This withdrawal incurred a transaction fee
                                    .form-group.m-none(data-bind='visible: isTransactionFee(), css: { "has-error": transactionFee.canValidate() && transactionFee.errors().length }')
                                        .md-form
                                            input#transactionFee.form-control(type='number', min='0', data-bind='value: transactionFee, valueUpdate: "afterkeydown"')
                                            label#transactionFeeLabel(for='transactionFee', data-bind='text: transactionFeeLabel')
                                        //ko if: transactionFee.canValidate() && transactionFee.errors().length
                                        //ko foreach: transactionFee.errors
                                        span.form-error(data-bind='text: message')
                                        // /ko
                                        // /ko
                                .modal-footer
                                    button.btn.btn-default.waves-effect(type='button', data-dismiss='modal') Cancel
                                    button.btn.stylish-color.waves-effect(type='button', data-bind='click: saveATMWithdrawal, enable: canSubmitATMWithdrawal') Save
                            #earnedPanel.tab-pane.fade(role='tabpanel')
                                .modal-body.mb-1
                                    span.error-message(data-bind='visible: withdrawalError, text: withdrawalError')
                                    .form-group.m-none
                                        .row
                                            .amount-input.col-md-8(data-bind='css: { "has-error": withdrawalEarnedAmount.canValidate() && withdrawalEarnedAmount.errors().length }')
                                                .md-form
                                                    input#withdrawalEarnedAmountInput.form-control(type='number', min='0', data-bind='value: withdrawalEarnedAmount, valueUpdate: "afterkeydown"')
                                                    label(for='withdrawalEarnedAmountInput') Amount Earned
                                                //ko if: withdrawalEarnedAmount.canValidate() && withdrawalEarnedAmount.errors().length
                                                //ko foreach: withdrawalEarnedAmount.errors
                                                span.form-error(data-bind='text: message')
                                                // /ko
                                                // /ko
                                            .currency-input.col-md-4
                                                label(for='withdrawalEarnedCurrency') Currency
                                                select.form-control.currency-dropdown#withdrawalEarnedCurrency(required)
                                                    option
                                                br
                                    .form-group
                                        label(for='withdrawalEarnedDateInput') Date
                                        .input-group
                                            input#withdrawalEarnedDateInput.form-control(data-bind='dateTimePicker: withdrawalDate', type='text')
                                            span.input-group-addon
                                                i.fa.fa-calendar
                                .modal-footer
                                    button.btn.btn-default.waves-effect(type='button', data-dismiss='modal') Cancel
                                    button.btn.stylish-color.waves-effect(type='button', data-bind='click: saveEarnedWithdrawal, enable: canSubmitEarnedWithdrawal') Save

    script.
        $('#home-nav').addClass('active');
        var vm = new HomeViewModel();
        var currencies = !{currency};
        var countries = !{countries};
        var user = !{user};
        vm.currencyArr = ko.observableArray(currencies);
        vm.currencyObj = ko.observable({});
        vm.countryArr = ko.observableArray([]);
        vm.countryObj = ko.observable(countries);
        vm.user = ko.observable(user);

        // Preload flag images
        var images = new Array()
        var noImage = ['BQ', 'BV', 'GF', 'GP', 'HM', 'IO', 'PM', 'RE', 'SJ', 'SX', 'UM', 'XK'];
        function preload(src) {
            images.push(new Image());
            images[images.length - 1].src = src;
        }
        for(var key in vm.countryObj().countries) {
            if(vm.countryObj().countries.hasOwnProperty(key)) {
                var country = vm.countryObj().countries[key];
                if(noImage.indexOf(key) == -1) {
                    vm.countryObj().countries[key].icon = key;
                    preload('images/flags/16/' + key + '.png');
                }
                else {
                    vm.countryObj().countries[key].icon = '_unknown';
                }
                country.id = key;
                vm.countryArr.push(country);
            }
        }
        for(var i = 0; i < vm.currencyArr().length; i++) {
            vm.currencyObj()[vm.currencyArr()[i].id] = vm.currencyArr()[i];
        }
        
        $(document).ready(function() {
            ko.applyBindings(vm);
            var formatOption = function(item) {
                if (!item.icon) { return item.display_name; }
                var $item = $(
                    '<span><img src="images/flags/16/' + item.icon + '.png" class="img-flag" /> ' + item.display_name + '</span>'
                );
                return $item;
            };
            var formatSelection = function(item) {
                if (!item.icon) { return item.display_name; }
                var $item = $(
                    '<span><img src="images/flags/16/' + item.icon + '.png" class="img-flag" /> ' + item.id + '</span>'
                );
                return $item;
            };
            $('.currency-dropdown').select2({
                data: vm.currencyArr(),
                matcher: function(params, data) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return data;
                    }
                    if(data.id === '') {
                        return null;
                    }
                    if(data.display_name.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    return null;
                },
                placeholder: {
                    id: '',
                    display_name: 'Home Currency',
                    icon: '_unknown'
                },
                templateResult: formatOption,
                templateSelection: formatSelection,
                theme: 'bootstrap'
            });

            var formatCountryOption = function(item) {
                var code = item.id || '_unknown';
                if(noImage.indexOf(code) > -1) {
                    code = '_unknown';
                }
                var $item = $(
                    '<span><img src="images/flags/16/' + code + '.png" class="img-flag" /> ' + item.name + '</span>'
                );
                return $item;
            };
            $('.country-dropdown').select2({
                data: vm.countryArr(),
                matcher: function(params, data) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return data;
                    }
                    if(data.id === '') {
                        return null;
                    }
                    if(data.name.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    if(data.native.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    return null;
                },
                placeholder: {
                    id: '',
                    name: 'Select Country',
                    icon: '_unknown'
                },
                templateResult: formatCountryOption,
                templateSelection: formatCountryOption,
                theme: 'bootstrap'
            });
            //- $('.select2-selection').css('height', 'auto');

            $('#cashModal').on('shown.bs.modal', function () {
                $('#withdrawalATMAmountInput').focus();
            });
            $('#transactionModal').on('shown.bs.modal', function() {
                $('#transactionAmountInput').focus();
            });
            $('#transactionCurrency').on("select2:select", function (e) {
                $('#transactionDate').focus();
            });
            $('#withdrawalCurrency').on("select2:select", function (e) {
                $('#withdrawalDate').focus();
            });
            /* ROTATING CARDS */
            $('.rotate-btn').on('click', function () {
                var cardId = $(this).attr('data-card');
                $('#' + cardId).toggleClass('flipped');
            });
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                var target = $(e.target).attr("href") // activated tab
                console.log(target);
                if(target == '#atmPanel') {
                    $('#withdrawalATMAmountInput').focus();
                    if(vm.transactionFee() != null) {
                        $('#transactionFeeLabel').addClass('active');
                    }
                }
                if(target == '#earnedPanel') {
                    $('#withdrawalEarnedAmountInput').focus();
                }
            });

            var lastWithdrawalCurrency = vm.getItem('lastWithdrawalCurrency');
            if(lastWithdrawalCurrency) {
                $('#withdrawalATMCurrency').val(lastWithdrawalCurrency).trigger('change');
                $('#withdrawalEarnedCurrency').val(lastWithdrawalCurrency).trigger('change');
            }
            var lastTransactionCurrency = vm.getItem('lastTransactionCurrency');
            if(lastTransactionCurrency) {
                $('#transactionCurrency').val(lastTransactionCurrency).trigger('change');
            }
            var lastTransactionCountry = vm.getItem('lastTransactionCountry');
            if(lastTransactionCountry) {
                $('#transactionCountry').val(lastTransactionCountry).trigger('change');
            }
        });