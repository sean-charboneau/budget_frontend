extends layout

block extraHeader
    link(rel='stylesheet', href='/css/cash.css')

block extraScripts
    script(type='text/javascript' src='/js/cash.js')
    script(type='text/javascript' src='/js/bindings/datepicker.js')
    script(type='text/javascript' src='/js/bindings/popover.js')

block content
    .container
        .row
            .col-md-12
                .card
                    .card-header.default-color.lighten-1.white-text
                        .row
                            .col.col-xs-6
                                span Cash
                            .col.col-xs-6.text-right
                                button.btn.btn-sm.stylish-color.btn-create(type='button', data-toggle='modal', data-target='#cashModal') Add Cash
                    .card-body.p-none
                        .text-center(data-bind='visible: cashReservesLoading')
                            .preloader-wrapper.big.active.m-top.m-bottom
                                .spinner-layer.spinner-blue-only
                                    .circle-clipper.left
                                        .circle
                                    .gap-patch
                                        .circle
                                    .circle-clipper.right
                                        .circle
                        table.table.table-striped.table-bordered.table-list(style='display: none', data-bind='visible: !cashReservesLoading()')
                            thead
                                tr
                                    th #
                                    th Type
                                    th Amount
                                    th Value
                                    th Date
                                    th Used
                                    th.icon-column
                            tbody
                                // ko foreach: cash
                                tr(data-bind='attr: { id: id }')
                                    td(data-bind='text: ($index() + 1)')
                                    td(data-bind='text: type')
                                    td
                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[currency].icon + ".png" }')
                                        span(data-bind='text: $root.formatCurrency(amount, currency)')
                                    td
                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[base_currency].icon + ".png" }')
                                        span(data-bind='text: $root.formatCurrency(base_amount, base_currency)')
                                        span.m-left-small(data-bind='visible: estimate') (E)
                                    td(data-bind='text: moment(date).format("YYYY-MM-DD")')
                                    td
                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[currency].icon + ".png" }')
                                        span(data-bind='text: $root.formatCurrency(used, currency) + " on " + transaction_count + " transactions"')
                                    td.cursor-pointer(data-bind='click: toggleRowDetails')
                                        i(data-bind='attr: { "class": showDetails() ? "fa fa-caret-down" : "fa fa-caret-right" }')
                                tr(data-bind='visible: showDetails')
                                    td(colspan='7', data-bind='visible: !detailsFetched()')
                                        .preloader-wrapper.big.active
                                            .spinner-layer.spinner-blue-only
                                                .circle-clipper.left
                                                    .circle
                                                .gap-patch
                                                    .circle
                                                .circle-clipper.right
                                                    .circle
                                    td(colspan='7', data-bind='visible: detailsFetched')
                                        ul
                                            // ko foreach: details
                                            li
                                                span(data-bind='text:moment(date).format("YYYY-MM-DD")')
                                                ul
                                                    // ko foreach: transactions
                                                    li
                                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[currency].icon + ".png" }')
                                                        span(data-bind='text: $root.formatCurrency(debit_amount, currency) + " (worth "')
                                                        img.img-flag(data-bind='attr: { src: "images/flags/16/" + $root.currencyObj()[base_currency].icon + ".png" }')
                                                        span(data-bind='text: $root.formatCurrency(base_amount * (debit_amount / amount), base_currency) + ") spent on " + category')
                                                    // /ko
                                            // /ko
                                        a(data-bind='attr: { href: "/transactions?filters=" + encodeURIComponent(JSON.stringify({withdrawalId: id})) }') More Details
                                // /ko
                    .panel-footer(style='display: none', data-bind='visible: !cashReservesLoading()')
                        .row
                            //- .col-md-5.page-display
                            //-     span(data-bind='text: pageDisplayText')
                            .col-md-7.offset-md-5.text-center
                                nav(aria-label='Page navigation')
                                    ul.pagination
                                        li.page-item
                                            a.page-link(href='#', data-bind='click: function(e) { navigate("first") }, clickBubble: false', aria-label='First')
                                                span(aria-hidden='true')
                                                    i.fa.fa-angle-double-left
                                                span.sr-only First
                                        li.page-item
                                            a.page-link(href='#', data-bind='click: function(e) { navigate("prev") }, clickBubble: false', aria-label='Previous')
                                                span(aria-hidden='true')
                                                    i.fa.fa-angle-left
                                                span.sr-only Previous
                                        li.page-item.disabled
                                            a.page-link(href='#', data-bind='text: filters.page') 1
                                        li.page-item
                                            a.page-link(href='#', data-bind='click: function(e) { navigate("next") }, clickBubble: false', aria-label='Next')
                                                span(aria-hidden='true')
                                                    i.fa.fa-angle-right
                                                span.sr-only Next
                                        li.page-item
                                            a.page-link(href='#', data-bind='click: function(e) { navigate("last") }, clickBubble: false', aria-label='Last')
                                                span(aria-hidden='true')
                                                    i.fa.fa-angle-double-right
                                                span.sr-only Last
                            //- .col-md-2.per-page
                            //-     .input-group
                            //-         .input-group-prepend
                            //-             span.input-group-text Per Page: 
                            //-         select.form-control(data-bind='options: filters.limitList, value: filters.limit')

        //- Modals
        #cashModal.modal.fade(role='dialog', aria-labelledby='cashModalLabel')
            .modal-dialog.cascading-modal(role='document')
                .modal-content
                    .modal-c-tabs
                        ul.nav.nav-tabs.tabs-2.default-color.darken-3(role='tablist')
                            li.nav-item
                                a.nav-link.active(data-toggle='tab', href='#atmPanel', role='tab') ATM Withdrawal
                            li.nav-item
                                a.nav-link(data-toggle='tab', href='#earnedPanel', role='tab') Earned Cash
                        .tab-content
                            #atmPanel.tab-pane.fade.show.active(role='tabpanel')
                                .modal-body.mb-1
                                    span.error-message(data-bind='visible: withdrawalError, text: withdrawalError')
                                    .form-group.m-none
                                        .row
                                            .amount-input.col-md-8(data-bind='css: { "has-error": withdrawalATMAmount.canValidate() && withdrawalATMAmount.errors().length }')
                                                .md-form
                                                    input#withdrawalATMAmountInput.form-control(type='number', min='0', data-bind='value: withdrawalATMAmount, valueUpdate: "afterkeydown"')
                                                    label(for='withdrawalATMAmountInput') Amount Withdrawn
                                                //ko if: withdrawalATMAmount.canValidate() && withdrawalATMAmount.errors().length
                                                //ko foreach: withdrawalATMAmount.errors
                                                span.form-error(data-bind='text: message')
                                                // /ko
                                                // /ko
                                            .currency-input.col-md-4
                                                label(for='withdrawalATMCurrency') Currency
                                                select.form-control.currency-dropdown#withdrawalATMCurrency(required)
                                                    option
                                                //- small.form-text.text-muted.m-bottom The currency you withdrew from the ATM
                                                br
                                    .form-group
                                        label(for='withdrawalATMDateInput') Date
                                        .input-group
                                            input#withdrawalATMDateInput.form-control(data-bind='dateTimePicker: withdrawalDate', type='text')
                                            .input-group-append
                                                span.input-group-text
                                                    i.fa.fa-calendar
                                    .form-group
                                        input#transactionFeeCheckbox(type='checkbox', value='', data-bind='checked: isTransactionFee')
                                        label(for='transactionFeeCheckbox') This withdrawal incurred a transaction fee
                                    .form-group.m-none(data-bind='visible: isTransactionFee(), css: { "has-error": transactionFee.canValidate() && transactionFee.errors().length }')
                                        .md-form
                                            input#transactionFee.form-control(type='number', min='0', data-bind='value: transactionFee, valueUpdate: "afterkeydown"')
                                            label#transactionFeeLabel(for='transactionFee', data-bind='text: transactionFeeLabel')
                                        //ko if: transactionFee.canValidate() && transactionFee.errors().length
                                        //ko foreach: transactionFee.errors
                                        span.form-error(data-bind='text: message')
                                        // /ko
                                        // /ko
                                .modal-footer
                                    button.btn.btn-default.waves-effect(type='button', data-dismiss='modal') Cancel
                                    button.btn.stylish-color.waves-effect(type='button', data-bind='click: saveATMWithdrawal, enable: canSubmitATMWithdrawal') Save
                            #earnedPanel.tab-pane.fade(role='tabpanel')
                                .modal-body.mb-1
                                    span.error-message(data-bind='visible: withdrawalError, text: withdrawalError')
                                    .form-group.m-none
                                        .row
                                            .amount-input.col-md-8(data-bind='css: { "has-error": withdrawalEarnedAmount.canValidate() && withdrawalEarnedAmount.errors().length }')
                                                .md-form
                                                    input#withdrawalEarnedAmountInput.form-control(type='number', min='0', data-bind='value: withdrawalEarnedAmount, valueUpdate: "afterkeydown"')
                                                    label(for='withdrawalEarnedAmountInput') Amount Earned
                                                //ko if: withdrawalEarnedAmount.canValidate() && withdrawalEarnedAmount.errors().length
                                                //ko foreach: withdrawalEarnedAmount.errors
                                                span.form-error(data-bind='text: message')
                                                // /ko
                                                // /ko
                                            .currency-input.col-md-4
                                                label(for='withdrawalEarnedCurrency') Currency
                                                select.form-control.currency-dropdown#withdrawalEarnedCurrency(required)
                                                    option
                                                br
                                    .form-group
                                        label(for='withdrawalEarnedDateInput') Date
                                        .input-group
                                            input#withdrawalEarnedDateInput.form-control(data-bind='dateTimePicker: withdrawalDate', type='text')
                                            .input-group-append
                                                span.input-group-text
                                                    i.fa.fa-calendar
                                .modal-footer
                                    button.btn.btn-default.waves-effect(type='button', data-dismiss='modal') Cancel
                                    button.btn.stylish-color.waves-effect(type='button', data-bind='click: saveEarnedWithdrawal, enable: canSubmitEarnedWithdrawal') Save


    script.
        $('#cash-nav').addClass('active');
        var vm = new CashViewModel();
        var currencies = !{currency};
        var countries = !{countries};
        vm.currencyArr = ko.observableArray(currencies);
        vm.currencyObj = ko.observable({});
        vm.countryArr = ko.observableArray([]);
        vm.countryObj = ko.observable(countries);

        // Preload flag images
        var images = new Array();
        var noImage = ['BQ', 'BV', 'GF', 'GP', 'HM', 'IO', 'PM', 'RE', 'SJ', 'SX', 'UM', 'XK'];
        function preload(src) {
            images.push(new Image());
            images[images.length - 1].src = src;
        }
        for(var key in vm.countryObj().countries) {
            if(vm.countryObj().countries.hasOwnProperty(key)) {
                var country = vm.countryObj().countries[key];
                if(noImage.indexOf(key) == -1) {
                    vm.countryObj().countries[key].icon = key;
                    preload('images/flags/16/' + key + '.png');
                }
                else {
                    vm.countryObj().countries[key].icon = '_unknown';
                }
                country.id = key;
                vm.countryArr.push(country);
            }
        }
        vm.countryArr.sort(function(a,b) {return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);} );
        
        for(var i = 0; i < vm.currencyArr().length; i++) {
            vm.currencyObj()[vm.currencyArr()[i].id] = vm.currencyArr()[i];
        }
        
        $(document).ready(function() {
            ko.applyBindings(vm);
            var formatOption = function(item) {
                if (!item.icon) { return item.display_name; }
                var $item = $(
                    '<span><img src="images/flags/16/' + item.icon + '.png" class="img-flag" /> ' + item.display_name + '</span>'
                );
                return $item;
            };
            var formatSelection = function(item) {
                if (!item.icon) { return item.display_name; }
                var $item = $(
                    '<span><img src="images/flags/16/' + item.icon + '.png" class="img-flag" /> ' + item.id + '</span>'
                );
                return $item;
            };
            $('.currency-dropdown').select2({
                data: vm.currencyArr(),
                matcher: function(params, data) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return data;
                    }
                    if(data.id === '') {
                        return null;
                    }
                    if(data.display_name.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    return null;
                },
                placeholder: {
                    id: '',
                    display_name: 'Home Currency',
                    icon: '_unknown'
                },
                templateResult: formatOption,
                templateSelection: formatSelection,
                theme: 'bootstrap'
            });

            var formatCountryOption = function(item) {
                var code = item.id || '_unknown';
                if(noImage.indexOf(code) > -1) {
                    code = '_unknown';
                }
                var $item = $(
                    '<span><img src="images/flags/16/' + code + '.png" class="img-flag" /> ' + item.name + '</span>'
                );
                return $item;
            };
            $('.country-dropdown').select2({
                data: vm.countryArr(),
                matcher: function(params, data) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return data;
                    }
                    if(data.id === '') {
                        return null;
                    }
                    if(data.name.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    if(data.native.toUpperCase().indexOf(term.toUpperCase()) > -1) {
                        return data;
                    }
                    return null;
                },
                placeholder: {
                    id: '',
                    name: 'Select Country',
                    icon: '_unknown'
                },
                templateResult: formatCountryOption,
                templateSelection: formatCountryOption,
                theme: 'bootstrap'
            });
            //- $('.select2-selection').css('height', 'auto');

            $('#cashModal').on('shown.bs.modal', function () {
                $('#withdrawalATMAmountInput').focus();
            });
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                var target = $(e.target).attr("href") // activated tab
                console.log(target);
                if(target == '#atmPanel') {
                    $('#withdrawalATMAmountInput').focus();
                    if(vm.transactionFee() != null) {
                        $('#transactionFeeLabel').addClass('active');
                    }
                }
                if(target == '#earnedPanel') {
                    $('#withdrawalEarnedAmountInput').focus();
                }
            });

            var lastWithdrawalCurrency = vm.getItem('lastWithdrawalCurrency');
            if(lastWithdrawalCurrency) {
                $('#withdrawalATMCurrency').val(lastWithdrawalCurrency).trigger('change');
                $('#withdrawalEarnedCurrency').val(lastWithdrawalCurrency).trigger('change');
            }
        });